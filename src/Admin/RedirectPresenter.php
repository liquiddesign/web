<?php

declare(strict_types=1);

namespace Web\Admin;

use Admin\BackendPresenter;
use Admin\Controls\AdminForm;
use Forms\Form;
use Pages\DB\Redirect;
use Pages\DB\RedirectRepository;

class RedirectPresenter extends BackendPresenter
{
	/** @inject */
	public RedirectRepository $redirectRepository;

	public string $tRedirect;

	public function beforeRender()
	{
		parent::beforeRender(); // TODO: Change the autogenerated stub

		$this->tRedirect = $this->translator->translate('adminWebRedirect.redirections', 'Přesměrování');
	}

	public function createComponentGrid()
	{
		$grid = $this->gridFactory->create($this->redirectRepository->many(), 20, 'priority');
		$grid->addColumnSelector();
		$grid->addColumnText($this->translator->translate('admin.created', 'Vytvořeno'), "createdTs|date:'d.m.Y'", '%s', 'createdTs');
		$grid->addColumnText($this->translator->translate('adminWebRedirect.fromURl', 'Z url'), 'fromUrl', '%s', 'fromUrl');
		$grid->addColumnText($this->translator->translate('adminWebRedirect.toURL', 'Na url'), 'toUrl', '%s', 'toUrl');

		$grid->addColumnInputInteger($this->translator->translate('admin.priority', 'Pořadí'), 'priority', '', '', 'priority', [], true);

		$grid->addColumnLinkDetail('Detail');
		$grid->addColumnActionDelete();

		$grid->addButtonSaveAll();
		$grid->addButtonDeleteSelected();

		$grid->addFilterTextInput('search', ['fromUrl', 'toUrl'], null, 'URL');

		$grid->addFilterButtons();

		return $grid;
	}

	public function createComponentForm(): Form
	{
		$form = $this->formFactory->create();

		$form->addText('fromUrl', $this->translator->translate('adminWebRedirect.fromURl', 'Z url'))
			->setHtmlAttribute('data-info', $this->translator->translate('adminWebRedirect.urlDescription', 'Relativní URL bez / na konci, např. "novinka/stara-adresa"'))
			->setRequired();
		$form->addText('toUrl', $this->translator->translate('adminWebRedirect.toURL', 'Na url'))
			->setHtmlAttribute('data-info', $this->translator->translate('adminWebRedirect.urlDescription', 'Relativní URL bez / na konci, např. "novinka/stara-adresa"'))
			->setRequired();
		$form->addText('priority', $this->translator->translate('admin.priority', 'Pořadí'))
			->setHtmlAttribute('data-info', $this->translator->translate('adminWebRedirect.priorityDescription', 'Nižší číslo znamená vyšší prioritu.'))->addRule($form::INTEGER)->setRequired()->setDefaultValue(0);

		$form->addSubmits(!$this->getParameter('redirect'));

		$form->onSuccess[] = function (AdminForm $form) {
			$values = $form->getValues('array');
			$values['fromUrl'] = \preg_replace('{/$}', '', $values['fromUrl']);
			$values['toUrl'] = \preg_replace('{/$}', '', $values['toUrl']);
			$redirect = $this->redirectRepository->syncOne($values, null, false);

			$this->flashMessage($this->translator->translate('admin.saved', 'Uloženo'), 'success');
			$form->processRedirect('detail', 'default', [$redirect]);
		};

		return $form;
	}

	public function renderDefault()
	{
		$this->template->headerLabel = $this->tRedirect;
		$this->template->headerTree = [
			[$this->tRedirect],
		];
		$this->template->displayButtons = [$this->createNewItemButton('new')];
		$this->template->displayControls = [$this->getComponent('grid')];
	}

	public function renderNew()
	{
		$tNew = $this->translator->translate('adminWebRedirect.newRedirection', 'Nové přesměrování');
		$this->template->headerLabel = $tNew;
		$this->template->headerTree = [
			[$this->tRedirect, 'default'],
			[$tNew],
		];
		$this->template->displayButtons = [$this->createBackButton('default')];
		$this->template->displayControls = [$this->getComponent('form')];
	}

	public function renderDetail()
	{
		$tDetail = $this->translator->translate('adminWebRedirect.detailRedirection', 'Detail  přesměrování');
		$this->template->headerLabel = $tDetail;
		$this->template->headerTree = [
			[$this->tRedirect, 'default'],
			[$tDetail],
		];
		$this->template->displayButtons = [$this->createBackButton('default')];
		$this->template->displayControls = [$this->getComponent('form')];
	}

	public function actionDetail(Redirect $redirect)
	{
		/** @var Form $form */
		$form = $this->getComponent('form');
		$form->setDefaults($redirect->jsonSerialize());
	}

}