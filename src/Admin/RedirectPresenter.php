<?php

declare(strict_types=1);

namespace Web\Admin;

use Admin\BackendPresenter;
use Admin\Controls\AdminForm;
use Admin\Controls\AdminGrid;
use Forms\Form;
use League\Csv\EncloseField;
use League\Csv\Reader;
use League\Csv\Writer;
use Nette\Application\Responses\FileResponse;
use Nette\Utils\FileSystem;
use Onnov\DetectEncoding\EncodingDetector;
use Pages\DB\Redirect;
use Pages\DB\RedirectRepository;
use StORM\ICollection;

class RedirectPresenter extends BackendPresenter
{
	protected const CONFIGURATION = [
		'importColumns' => [
			'fromUrl' => 'Z URL',
			'toUrl' => 'Do URL',
			'fromMutation' => 'Z mutace',
			'toMutation' => 'Do mutace',
			'priority' => 'Priorita',
		],
		'importExampleFile' => null,
	];

	/**
	 * @inject
	 */
	public RedirectRepository $redirectRepository;

	public string $tRedirect;

	public function beforeRender(): void
	{
		// TODO: Change the autogenerated stub
		parent::beforeRender();

		$this->tRedirect = $this->_('adminWebRedirect.redirections', 'Přesměrování');
	}

	public function createComponentGrid(): AdminGrid
	{
		$grid = $this->gridFactory->create($this->redirectRepository->many(), 20, 'priority');
		$grid->addColumnSelector();
		$grid->addColumnText($this->_('admin.created', 'Vytvořeno'), "createdTs|date:'d.m.Y'", '%s', 'createdTs');
		$grid->addColumnText($this->_('adminWebRedirect.fromURl', 'Z URL'), 'fromUrl', '%s', 'fromUrl');
		$grid->addColumnText($this->_('adminWebRedirect.toURL', 'Na URL'), 'toUrl', '%s', 'toUrl');

		$grid->addColumnInputInteger($this->_('admin.priority', 'Pořadí'), 'priority', '', '', 'priority', [], true);

		$grid->addColumnLinkDetail('Detail');
		$grid->addColumnActionDelete();

		$grid->addButtonSaveAll();
		$grid->addButtonDeleteSelected();

		$grid->addFilterTextInput('search', ['fromUrl', 'toUrl'], null, 'URL');

		$grid->addFilterButtons();

		$submit = $grid->getForm()->addSubmit('export', 'Exportovat (CSV)')->setHtmlAttribute('class', 'btn btn-outline-primary btn-sm');

		$submit->onClick[] = function ($button) use ($grid): void {
			$grid->getPresenter()->redirect('export', [$grid->getSelectedIds()]);
		};

		return $grid;
	}

	public function createComponentForm(): Form
	{
		$form = $this->formFactory->create();

		$form->addText('fromUrl', $this->_('adminWebRedirect.fromURl', 'Z URL'))
			->setHtmlAttribute('data-info', $this->_('adminWebRedirect.urlDescription', 'Relativní URL bez / na konci, např. "novinka/stara-adresa"'))
			->setRequired();
		$form->addText('toUrl', $this->_('adminWebRedirect.toURL', 'Na URL'))
			->setHtmlAttribute('data-info', $this->_('adminWebRedirect.urlDescription', 'Relativní URL bez / na konci, např. "novinka/stara-adresa"'))
			->setRequired();
		$form->addText('priority', $this->_('admin.priority', 'Pořadí'))
			->setHtmlAttribute('data-info', $this->_('adminWebRedirect.priorityDescription', 'Nižší číslo znamená vyšší prioritu.'))->addRule($form::INTEGER)->setRequired()->setDefaultValue(0);

		$form->addSubmits(!$this->getParameter('redirect'));

		$form->onSuccess[] = function (AdminForm $form): void {
			$values = $form->getValues('array');
			$values['fromUrl'] = \preg_replace('{/$}', '', $values['fromUrl']);
			$values['toUrl'] = \preg_replace('{/$}', '', $values['toUrl']);
			$redirect = $this->redirectRepository->syncOne($values, null, false);

			$this->flashMessage($this->_('admin.saved', 'Uloženo'), 'success');
			$form->processRedirect('detail', 'default', [$redirect]);
		};

		return $form;
	}

	public function renderDefault(): void
	{
		$this->template->headerLabel = $this->tRedirect;
		$this->template->headerTree = [
			[$this->tRedirect],
		];
		$this->template->displayButtons = [$this->createNewItemButton('new'), $this->createButton('importCsv', '<i class="fas fa-file-upload mr-1"></i>Import')];
		$this->template->displayControls = [$this->getComponent('grid')];
	}

	public function renderNew(): void
	{
		$tNew = $this->_('adminWebRedirect.newRedirection', 'Nové přesměrování');
		$this->template->headerLabel = $tNew;
		$this->template->headerTree = [
			[$this->tRedirect, 'default'],
			[$tNew],
		];
		$this->template->displayButtons = [$this->createBackButton('default')];
		$this->template->displayControls = [$this->getComponent('form')];
	}

	public function renderDetail(): void
	{
		$tDetail = $this->_('adminWebRedirect.detailRedirection', 'Detail  přesměrování');
		$this->template->headerLabel = $tDetail;
		$this->template->headerTree = [
			[$this->tRedirect, 'default'],
			[$tDetail],
		];
		$this->template->displayButtons = [$this->createBackButton('default')];
		$this->template->displayControls = [$this->getComponent('form')];
	}

	public function renderImportCsv(): void
	{
		$this->template->headerLabel = 'Import zdrojového souboru';
		$this->template->headerTree = [
			['Přesměrování', 'default'],
			['Import zdrojového souboru'],
		];
		$this->template->displayButtons = [$this->createBackButton('default')];
		$this->template->displayControls = [$this->getComponent('importCsvForm')];
	}

	public function handleDownloadImportExampleFile(): void
	{
		if (isset(self::CONFIGURATION['importExampleFile']) && self::CONFIGURATION['importExampleFile']) {
			$this->getPresenter()->sendResponse(new FileResponse($this->wwwDir . '/userfiles/' . self::CONFIGURATION['importExampleFile'], "example.csv", 'text/csv'));
		}
	}

	public function createComponentImportCsvForm(): AdminForm
	{
		$form = $this->formFactory->create();

		$filename = 'redirects';

		$lastUpdate = null;
		$path = \dirname(__DIR__, 5) . "/userfiles/$filename.csv";

		if (\file_exists($path)) {
			$lastUpdate = \filemtime($path);
		}

		$form->addText('lastProductFileUpload', 'Poslední aktualizace souboru')->setDisabled()->setDefaultValue($lastUpdate ? \date('d.m.Y G:i', $lastUpdate) : null);

		$allowedColumns = '';

		foreach (self::CONFIGURATION['importColumns'] as $key => $value) {
			$allowedColumns .= "$key, $value<br>";
		}

		$filePicker = $form->addFilePicker('file', 'Soubor (CSV)')
			->setRequired()
			->addRule($form::MIME_TYPE, 'Neplatný soubor!', 'text/csv');

		$info = '';

		if (isset(self::CONFIGURATION['importExampleFile']) && self::CONFIGURATION['importExampleFile']) {
			$info .= 'Vzorový soubor: <a href="' . $this->link('downloadImportExampleFile!') . '">' . self::CONFIGURATION['importExampleFile'] . '</a><br>';
		}

		$info .= 'Podporuje <b>pouze</b> formátování Windows a Linux (UTF-8)!';

		$filePicker->setHtmlAttribute('data-info', $info);

		$form->addSelect('delimiter', 'Oddělovač', [
			';' => 'Středník (;)',
			',' => 'Čárka (,)',
			'	' => 'Tab (\t)',
			' ' => 'Mezera ( )',
			'|' => 'Pipe (|)',
		])->setHtmlAttribute('data-info', '<h5 class="mt-2">Nápověda</h5>
Soubor <b>musí obsahovat</b> hlavičku a sloupce "Z URL" a "Do URL".<br><br>
Povolené sloupce hlavičky (lze použít obě varianty kombinovaně):<br>
' . $allowedColumns . '<br>
<b>Pozor!</b> Pokud pracujete se souborem na zařízeních Apple, ujistětě se, že vždy při ukládání použijete možnost uložit do formátu Windows nebo Linux (UTF-8)!');

		$form->addSubmit('submit', 'Importovat');

		$form->onValidate[] = function (AdminForm $form): void {
			$values = $form->getValues('array');

			/** @var \Nette\Http\FileUpload $file */
			$file = $values['file'];

			if ($file->hasFile()) {
				return;
			}

			$form['file']->addError('Neplatný soubor!');
		};

		$form->onSuccess[] = function (AdminForm $form) use ($filename): void {
			$values = $form->getValues('array');

			/** @var \Nette\Http\FileUpload $file */
			$file = $values['file'];

			$file->move(\dirname(__DIR__, 5) . "/userfiles/$filename.csv");
			\touch(\dirname(__DIR__, 5) . "/userfiles/$filename.csv");

			$connection = $this->redirectRepository->getConnection();

			$connection->getLink()->beginTransaction();

			try {
				$this->importCsv(
					\dirname(__DIR__, 5) . "/userfiles/$filename.csv",
					$values['delimiter'],
				);

				$connection->getLink()->commit();
				$this->flashMessage('Provedeno', 'success');
			} catch (\Exception $e) {
				FileSystem::delete(\dirname(__DIR__, 5) . "/userfiles/$filename.csv");
				$connection->getLink()->rollBack();

				$this->flashMessage($e->getMessage() !== '' ? $e->getMessage() : 'Import dat se nezdařil!', 'error');
			}

			$this->redirect('this');
		};

		return $form;
	}

	public function actionDetail(Redirect $redirect): void
	{
		/** @var \Forms\Form $form */
		$form = $this->getComponent('form');
		$form->setDefaults($redirect->toArray());
	}

	public function renderExport(array $ids): void
	{
		unset($ids);
		
		$this->template->headerLabel = 'Export přesměrování do CSV';
		$this->template->headerTree = [
			['Přesměrování', 'default'],
			['Export'],
		];
		$this->template->displayButtons = [$this->createBackButton('default')];
		$this->template->displayControls = [$this->getComponent('exportForm')];
	}

	public function createComponentExportForm(): AdminForm
	{
		/** @var \Grid\Datagrid $grid */
		$grid = $this->getComponent('grid');

		$ids = $this->getParameter('ids') ?: [];
		$totalNo = $grid->getPaginator()->getItemCount();
		$selectedNo = \count($ids);
		
		$form = $this->formFactory->create();
		$form->setAction($this->link('this', ['selected' => $this->getParameter('selected')]));
		$form->addRadioList('bulkType', 'Exportovat', [
			'selected' => "vybrané ($selectedNo)",
			'all' => "celý výsledek ($totalNo)",
		])->setDefaultValue('selected');

		$form->addSelect('delimiter', 'Oddělovač', [
			';' => 'Středník (;)',
			',' => 'Čárka (,)',
			'   ' => 'Tab (\t)',
			' ' => 'Mezera ( )',
			'|' => 'Pipe (|)',
		]);

		$form->addSubmit('submit', 'Exportovat');

		$form->onSuccess[] = function (AdminForm $form) use ($ids, $grid): void {
			$values = $form->getValues('array');

			$items = $values['bulkType'] === 'selected' ? $this->redirectRepository->many()->where('this.uuid', $ids) : $grid->getFilteredSource();

			$tempFilename = \tempnam($this->tempDir, "csv");

			$this->csvExport(
				$items,
				Writer::createFromPath($tempFilename),
				$values['delimiter'],
				self::CONFIGURATION['importColumns'],
			);

			$this->getPresenter()->sendResponse(new FileResponse($tempFilename, "products.csv", 'text/csv'));
		};

		return $form;
	}

	protected function importCsv(string $filePath, string $delimiter = ';'): void
	{
		if (!\ini_get("auto_detect_line_endings")) {
			\ini_set("auto_detect_line_endings", '1');
		}

		$csvData = FileSystem::read($filePath);

		$detector = new EncodingDetector();

		$detector->disableEncoding([
			EncodingDetector::ISO_8859_5,
			EncodingDetector::KOI8_R,
		]);

		$encoding = $detector->getEncoding($csvData);

		if ($encoding !== 'utf-8') {
			$csvData = \iconv('windows-1250', 'utf-8', $csvData);
			$reader = Reader::createFromString($csvData);
			unset($csvData);
		} else {
			unset($csvData);
			$reader = Reader::createFromPath($filePath);
		}

		$reader->setDelimiter($delimiter);
		$reader->setHeaderOffset(0);
		$mutations = $this->redirectRepository->getConnection()->getAvailableMutations();

		$header = $reader->getHeader();
		$parsedHeader = [];

		foreach ($header as $headerItem) {
			if (isset(self::CONFIGURATION['importColumns'][$headerItem])) {
				$parsedHeader[$headerItem] = $headerItem;
			} elseif ($key = \array_search($headerItem, self::CONFIGURATION['importColumns'])) {
				$parsedHeader[$key] = $headerItem;
			}
		}

		if (\count($parsedHeader) === 0) {
			throw new \Exception('Soubor neobsahuje hlavičku nebo nebyl nalezen žádný použitelný sloupec!');
		}

		if (!isset($parsedHeader['fromUrl']) || !isset($parsedHeader['toUrl'])) {
			throw new \Exception('Soubor neobsahuje zdrojovou nebo cílovou URL!');
		}

		foreach ($reader->getRecords() as $record) {
			$newValues = [];

			foreach ($record as $key => $value) {
				$key = \array_search($key, $parsedHeader);

				if (!$key) {
					continue;
				}

				if ($key === 'fromMutation' || $key === 'toMutation') {
					if (isset($mutations[$value])) {
						$newValues[$key] = $value;
					}
				} elseif ($key === 'priority') {
					$newValues[$key] = \intval($value);
				} else {
					$newValues[$key] = $value;
				}
			}

			try {
				if (!isset($newValues['fromUrl']) && !isset($newValues['toUrl'])) {
					continue;
				}

				$this->redirectRepository->syncOne($newValues);
			} catch (\Exception $e) {
				throw new \Exception('Chyba při zpracování dat!');
			}
		}
	}

	protected function csvExport(ICollection $items, Writer $writer, string $delimiter = ';', ?array $header = null): void
	{
		$writer->setDelimiter($delimiter);

		EncloseField::addTo($writer, "\t\22");

		if ($header) {
			$writer->insertOne($header);
		}

		while ($item = $items->fetch()) {
			$row = [];

			foreach (\array_keys($header) as $columnKey) {
				$row[] = $item->getValue($columnKey) === false ? '0' : $item->getValue($columnKey);
			}

			$writer->insertOne($row);
		}
	}
}
